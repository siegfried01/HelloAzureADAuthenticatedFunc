name: Rebuild Azure API Mgr and add Azure Functions

on:
  workflow_dispatch:
    branches:
    - master

  push:
    branches:
    - master

env:
  AZURE_FUNCTIONAPP_NAME: jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs
  FUNCTIONAPP: jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs
  AZURE_FUNCTIONAPP_PACKAGE_PATH: .\published
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 6.0.x
  WORKING_DIRECTORY: .
  RG: rg_CrewTaskMgr
  LOC: westus
  UNIQUE_NAME: jac3sukjdrxzi
  PRODUCT_NAME: Unlimited

jobs:
  demo-rest-api-call:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        creds: ${{ secrets.AZURE_CLIENT_SECRET }}
        enable-AzPSSession: true

    - name: Make Azure REST API Call
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
          $AZURE_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"
          $AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
          az login --service-principal -u "$AZURE_CLIENT_ID" -p "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
          $subscriptionId = (az account show --query 'id' -o tsv)
          write-output "list apims"
          az apim list  --resource-group $env:RG
          $APIM_SERVICE_NAME= "$env:UNIQUE_NAME-apim"
          $apis = az apim api list --resource-group $env:RG --service-name $APIM_SERVICE_NAME | ConvertFrom-Json
          Write-Output "delete APIs"
          foreach($api in $apis){
            Write-Output "az apim api delete --api-id $(${api}.name) --resource-group $env:RG --service-name $APIM_SERVICE_NAME --yes"
            az apim api delete --api-id $api.name --resource-group $env:RG --service-name $APIM_SERVICE_NAME --yes
          }
          $API_ID="$env:UNIQUE_NAME-func-CrewTaskMgrAuthSvcs"
          write-output "API_ID=$API_ID APIM_SERVICE_NAME=$APIM_SERVICE_NAME"
          write-output "az apim create --name $APIM_SERVICE_NAME --publisher-email `"sheintze@hotmail.com`" --publisher-name `"WaveCentric`" --resource-group $env:RG --location $env:LOC --public-network-access `"true`" --sku-name `"Consumption`""
          az apim create --name $APIM_SERVICE_NAME --publisher-email "sheintze@hotmail.com" --publisher-name "WaveCentric" --resource-group $env:RG --location $env:LOC --public-network-access "true" --sku-name "Consumption"
          write-output "az apim api create --service-name $APIM_SERVICE_NAME -g $env:RG --api-id $API_ID --path `"jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs`" --display-name `"$API_ID DisplayName`" --description `"$API_ID Description`" --subscription-required false --api-type `"http`""
          az apim api create --service-name $APIM_SERVICE_NAME -g $env:RG --api-id "$API_ID" --path "jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs" --display-name "$API_ID" --description "$API_ID Description" --subscription-required false --api-type "http" 
          $token=$(az account get-access-token --query 'accessToken' -o tsv)
          $uri = "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$env:RG/providers/Microsoft.Web/sites/$env:FUNCTIONAPP/host/default/listKeys?api-version=2018-11-01"
          $functionkeylist = az rest --headers "Authorization=Bearer $token" --method post --uri $uri
          $keylistobject = $functionkeylist | ConvertFrom-Json
          $functionKey = $keylistobject.functionKeys.default
          Write-Output "First 5 characters of function key: "
          Write-Output $functionKey.Substring(0,5)
          $ops = az rest --headers "Authorization=Bearer $token" --method get --uri "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$env:RG/providers/Microsoft.Web/sites/$env:FUNCTIONAPP/functions?api-version=2015-08-01" | jq  .value[].properties.name | tr -d '\r' | tr  '\n' ' ' | tr -d '"' | sed -e 's/\s*/ /'
          foreach ($op in $ops) {
            $op = $op -replace '\s',''
            $op = $op -replace '"',''
            if($op){
              Write-Host "begin create op=post-$op for api=$API_ID"
              az apim api operation create -g $env:RG --service-name $APIM_SERVICE_NAME --api-id $API_ID  --method "POST" --display-name "post-$op" --description "$op description" --operation-id "post-$op" --url-template "/$op" | tr -d '\r'
              Write-Host "begin create op=get-$op for api=$API_ID"
              az apim api operation create -g $env:RG --service-name $APIM_SERVICE_NAME --api-id $API_ID  --method "GET" --display-name "post-$op" --description "$op description" --operation-id "get-$op" --url-template "/$op" | tr -d '\r'
            }
          }
          $ApiMgmtContext = New-AzApiManagementContext -ResourceGroupName $env:RG -ServiceName $APIM_SERVICE_NAME
          $accountInfo = az account show
          $accountInfoObject = $accountInfo | ConvertFrom-Json
          $subscriptionId  = $accountInfoObject.id
          Write-Output "log in again using az login!"
          az login --service-principal -u "$AZURE_CLIENT_ID" -p "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
          $SecurePassword = ConvertTo-SecureString -String $AZURE_CLIENT_SECRET -AsPlainText -Force
          $TenantId = $AZURE_TENANT_ID
          $ApplicationId = $AZURE_CLIENT_ID
          $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationId, $SecurePassword
          Write-Output "log in again using Connect-AzAccount!"
          Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential
          write-output "New-AzApiManagementNamedValue -Context `$ApiMgmtContext -NamedValueId `"jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs-key`"  -Name `"jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs-key`"  -Value $functionKey"
          New-AzApiManagementNamedValue -Context $ApiMgmtContext -NamedValueId "jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs-key"  -Name "jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs-key"  -Value $functionKey
          $credential = New-AzApiManagementBackendCredential -AuthorizationHeaderScheme basic -Header @{"x-functions-key" = @("{{jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs-key}}")}
          write-output "credential = $credential"
          $backEndRunTimeURL="https://$env:UNIQUE_NAME-func-crewtaskmgrauthsvcs.azurewebsites.net/api"
          $backEndName="$env:UNIQUE_NAME-func-crewtaskmgrauthsvcs"
          write-output "`$backend = New-AzApiManagementBackend -Context `$ApiMgmtContext -BackendId $backEndName -Url `$backEndRunTimeURL -Protocol http -Credential `$credential -Title `"jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs`"  -Description `$backEndName -ResourceId `"https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$env:RG/providers/Microsoft.Web/sites/$backendAzureResource`""
          $backend = New-AzApiManagementBackend -Context $ApiMgmtContext -BackendId $backEndName -Url $backEndRunTimeURL -Protocol http -Credential $credential -Title "jac3sukjdrxzi-func-CrewTaskMgrAuthSvcs"  -Description $backEndName  -ResourceId "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$env:RG/providers/Microsoft.Web/sites/$backendAzureResource"
          write-output "backend = $backend"
          $policy="<policies>
          >>  <inbound>
          >>    <base />
          >>    <set-backend-service id='apim-generated-policy' backend-id='$backEndName' />
          >>  </inbound>
          >>  <backend>
          >>    <base />
          >>  </backend>
          >>  <outbound>
          >>    <base />
          >>  </outbound>
          >>  <on-error>
          >>    <base />
          >>  </on-error>
          >></policies>"
          write-output "Set-AzApiManagementPolicy -Context `$ApiMgmtContext -ApiId $API_ID -Policy $policy"
          Set-AzApiManagementPolicy -Context $ApiMgmtContext -ApiId $API_ID -Policy $policy
          az apim product create --service-name $APIM_SERVICE_NAME --name "$env:PRODUCT_NAME" --description "$env:PRODUCT_NAME Description"
          Write-Output "az apim product api add --resource-group $env:RG --service-name $APIM_SERVICE_NAME  --product-id `"$env:PRODUCT_NAME`" --api-id $API_ID"
          az apim product api add --resource-group $env:RG --service-name $APIM_SERVICE_NAME  --product-id "$env:PRODUCT_NAME" --api-id $API_ID
          write-output "Error Code: ResourceNotFound Error Message: Product not found. Request Id: 48408468-effa-4cc7-a694-ba1a2f0cff8c "
          write-output "Set-AzApiManagementProduct -Context $ApiMgmtContext  -ProductId `"$env:PRODUCT_NAME`" -Title `"$env:PRODUCT_NAME`" -Description `"$env:PRODUCT_NAME for development`" -LegalTerms `"$env:PRODUCT_NAME and Free for all`" -SubscriptionRequired `$false -State `"Published`""
          Set-AzApiManagementProduct -Context $ApiMgmtContext  -ProductId "$env:PRODUCT_NAME" -Title "$env:PRODUCT_NAME" -Description "$env:PRODUCT_NAME for development" -LegalTerms "$env:PRODUCT_NAME and Free for all" -SubscriptionRequired $false -State "Published"
          write-output "Saurabh Sharma Add the API to product to $env:PRODUCT_NAME. This works!"
          $Api = Get-AzApiManagementApi -Context $ApiMgmtContext -Name $API_ID
          Add-AzApiManagementApiToProduct -Context $ApiMgmtContext -ProductId "$env:PRODUCT_NAME" -ApiId $API_ID
          write-output "Saurabh Sharma Set Subscription to false. This works!"
          $Api = Get-AzApiManagementApi -Context $ApiMgmtContext -Name $API_ID
          $Api.SubscriptionRequired=$false 
          Set-AzApiManagementApi -InputObject $Api -Name $Api.Name -ServiceUrl $Api.ServiceUrl -Protocols $Api.Protocols
        azPSVersion: "latest"
